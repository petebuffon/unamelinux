<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>web server on uname Linux</title>
    <link>https://unamelinux.com/tags/web-server/</link>
    <description>Recent content in web server on uname Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 06 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://unamelinux.com/tags/web-server/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>alias docker=podman</title>
      <link>https://unamelinux.com/posts/podman/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unamelinux.com/posts/podman/</guid>
      <description>I&amp;rsquo;ve messed around with Podman every now and then and watched it&amp;rsquo;s development over the last few years, but haven&amp;rsquo;t used it extensively. With Podman&amp;rsquo;s release of version 2.1.0, I thought it would be a great time to explore the project further.
  Podman is an open-source daemonless container engine alternative to Docker. We could simply substitute podman in for docker:
$ alias docker=podman However, Podman also has a number of features that set it a part from Docker.</description>
    </item>
    
    <item>
      <title>Gunicorn and Flask</title>
      <link>https://unamelinux.com/posts/gunicorn/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unamelinux.com/posts/gunicorn/</guid>
      <description>Web applications seem to be everywhere nowadays. Python is my go to programming language and so I thought I would build a web application using Flask, a lightweight WSGI web application framework. Starting out with Flask is simple enough, but if you want advanced features such as database integration or user logins, then you will either have to build them yourself or rely on the rich Flask extension community.
I recently finished CS50: Introduction to Computer Science class on edX.</description>
    </item>
    
    <item>
      <title>OpenSSL</title>
      <link>https://unamelinux.com/posts/openssl/</link>
      <pubDate>Fri, 26 Jun 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unamelinux.com/posts/openssl/</guid>
      <description>OpenSSL is a wide spread open source cryptographic software library that contains implementations of the Transport Layer Security (TLS) and Secure Sockets Layer (SSL) protocols. Today most open source security applications utilize OpenSSL.
Hypertext Transfer Protocol Secure (HTTPS) is encrypted using TLS or its predecessor SSL. Encryption of HTTP traffic helps protect against man-in-the-middle and eavesdropping attacks and is a powerful security tool for deploying applications, even those that never see public access.</description>
    </item>
    
    <item>
      <title>Docker Compose and Volumes</title>
      <link>https://unamelinux.com/posts/docker-compose/</link>
      <pubDate>Thu, 19 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unamelinux.com/posts/docker-compose/</guid>
      <description>In the first post of the container series Linux Containers and Docker, I introduced Linux Containers and Docker, as well as how to use the Docker CLI and basic management of containers. In this second post of the series I turn my focus to my favorite Docker management tool, Docker Compose.
  Docker Compose is a container management tool for Docker, written in Python, and it is a game changer.</description>
    </item>
    
    <item>
      <title>Linux Containers and Docker</title>
      <link>https://unamelinux.com/posts/docker/</link>
      <pubDate>Fri, 06 Mar 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unamelinux.com/posts/docker/</guid>
      <description>Containers have radically changed how computer systems and applications are built, managed, and deployed. At home I deploy a combination of containers and VMs for my own personal use.
 Building Blocks While similar to virtualization, containers have several key differences. Each virtual machine created by a hypervisor has its own kernel and emulated hardware. Containers share the same kernel as the host and isolate application processes from the rest of the system.</description>
    </item>
    
  </channel>
</rss>
