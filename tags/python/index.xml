<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on uname Linux</title>
    <link>https://unamelinux.com/tags/python/</link>
    <description>Recent content in Python on uname Linux</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 30 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://unamelinux.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>List Comprehensions</title>
      <link>https://unamelinux.com/posts/list-comprehensions/</link>
      <pubDate>Tue, 30 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://unamelinux.com/posts/list-comprehensions/</guid>
      <description>I initially thought Python list comprehensions were obtuse and unnecessary, a bit of syntactic sugar I didn&amp;rsquo;t need, but after spending more time with them my opinion has completely flipped. Now I not only use them as much as I can, but I also want to get the word out for those who might not know about them.
Letâ€™s start with a simple example. Let&amp;rsquo;s say I want to alter all the items in a list using a function and generate a new list.</description>
    </item>
    
    <item>
      <title>Python Packaging</title>
      <link>https://unamelinux.com/posts/python-packaging/</link>
      <pubDate>Mon, 23 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unamelinux.com/posts/python-packaging/</guid>
      <description>Where to start? With the holidays fast approaching, I thought I would dedicate a blog post to packaging, specifically Python packaging. I&amp;rsquo;ll go ahead and say it, packaging Python projects is confusing. If we go to the official Python documentation and take a look at the Distributing Python Modules section we get the following information about these projects:
 Distutils - Added to the Python standard library in 1998. The direct use of Distutils is currently being phased out.</description>
    </item>
    
    <item>
      <title>Gunicorn and Flask</title>
      <link>https://unamelinux.com/posts/gunicorn/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unamelinux.com/posts/gunicorn/</guid>
      <description>Web applications seem to be everywhere nowadays. Python is my go to programming language and so I thought I would build a web application using Flask, a lightweight WSGI web application framework. Starting out with Flask is simple enough, but if you want advanced features such as database integration or user logins, then you will either have to build them yourself or rely on the rich Flask extension community.
I recently finished CS50: Introduction to Computer Science class on edX.</description>
    </item>
    
    <item>
      <title>Docker Build</title>
      <link>https://unamelinux.com/posts/docker-build/</link>
      <pubDate>Thu, 09 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>https://unamelinux.com/posts/docker-build/</guid>
      <description>If you need a refresher here are the first two posts in the series, Linux Containers and Docker and Docker Compose and Volumes.
Before moving on to other Linux container platforms, I&amp;rsquo;d like to focus on one more Docker command, docker build. Sometimes it&amp;rsquo;s helpful to slightly alter existing images, or create entirely new images not available on the Docker Hub. Building images is relatively straight forward once you get a feel for the syntax of Docker images.</description>
    </item>
    
  </channel>
</rss>
